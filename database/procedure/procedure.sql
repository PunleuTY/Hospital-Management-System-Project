-- Appointment Table
    -- Add appointment record
CREATE OR REPLACE PROCEDURE AddAppointmentRecord(
    IN INPUT_PURPOSE VARCHAR(255), 
    IN INPUT_DATE_TIME TIMESTAMP, 
    IN INPUT_STATUS VARCHAR(50), 
    IN INPUT_DOCTOR_ID INT, 
    IN INPUT_PATIENT_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO APPOINTMENT(PURPOSE, DATE_TIME, STATUS, DOCTOR_ID, PATIENT_ID)
    VALUES (INPUT_PURPOSE, INPUT_DATE_TIME, INPUT_STATUS, INPUT_DOCTOR_ID, INPUT_PATIENT_ID);
END;
$$;

CALL AddAppointmentRecord("CheckUp", "2025-0");

	-- Modify appointment status
CREATE OR REPLACE PROCEDURE UpdateAppointmentStatus(
    IN INPUT_STATUS VARCHAR(50),
    IN INPUT_APPOINTMENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN 
    UPDATE APPOINTMENT
    SET STATUS = IFNULL(INPUT_STATUS, STATUS)
    WHERE APPOINTMENT_ID = INPUT_APPOINTMENT_ID;
END;
$$;

	-- View appointment of a doctor by date
CREATE OR REPLACE PROCEDURE ViewAppointmentByDate(IN INPUT_DATE DATE, IN INPUT_DOCTOR_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT
        a.APPOINTMENT_ID,
        a.DATE_TIME,
        a.PURPOSE,
        a.STATUS,
        CONCAT(p.FIRST_NAME, " ", p.LAST_NAME) AS PATIENT_NAME
    FROM APPOINTMENT a
    JOIN PATIENT p ON a.PATIENT_ID = p.PATIENT_ID
    WHERE DATE(DATE_TIME) = DATE(INPUT_DATE) AND a.DOCTOR_ID = INPUT_DOCTOR_ID;
END;
$$;

	-- View all appointment of a doctor
CREATE OR REPLACE PROCEDURE ViewAppointmentByDoctorID(
    IN INPUT_DOCTOR_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT 
        APPOINTMENT_ID,
        DATE_TIME,
        PURPOSE,
        STATUS,
        PATIENT_ID
    FROM APPOINTMENT
    WHERE DOCTOR_ID = INPUT_DOCTOR_ID;
END;
$$;

    --  Filter view appointment
CREATE OR REPLACE PROCEDURE FilterViewAppointment(
    IN INPUT_APPOINTMENT_ID INT, 
    IN INPUT_STATUS VARCHAR(50),
    IN INPUT_DOCTOR_ID INT,
    IN INPUT_PATIENT_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
        SELECT * FROM APPOINTMENT
        WHERE
            (INPUT_APPOINTMENT_ID IS NULL OR Appointment_ID = INPUT_APPOINTMENT_ID)
            AND (INPUT_STATUS IS NULL OR Status = INPUT_STATUS)
            AND (INPUT_DOCTOR_ID IS NULL OR Doctor_ID = INPUT_DOCTOR_ID)
            AND (INPUT_PATIENT_ID IS NULL OR Patient_ID = INPUT_PATIENT_ID);
END;
$$;

-- Medical Record
	-- Add medical record
CREATE OR REPLACE PROCEDURE AddMedicalRecord(
    IN INPUT_PRESCRIPTION TEXT,
    IN INPUT_DIAGNOSIS TEXT,
    IN INPUT_LAB_RESULT VARCHAR(255),
    IN INPUT_TREATMENT VARCHAR(255),
    IN INPUT_PATIENT_ID INT,
    IN INPUT_APPOINTMENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO MEDICAL_RECORD(
        PRESCRIPTION,
        DIAGNOSIS,
        LAB_RESULT,
        TREATMENT,
        PATIENT_ID,
        APPOINTMENT_ID
    )
    VALUES
    (
        INPUT_PRESCRIPTION,
        INPUT_DIAGNOSIS,
        INPUT_LAB_RESULT,
        INPUT_TREATMENT,
        INPUT_PATIENT_ID,
        INPUT_APPOINTMENT_ID
    );
END;
$$;

	-- Modify medical record
CREATE OR REPLACE PROCEDURE UpdateMedicalRecordDetails(
    IN INPUT_PRESCRIPTION TEXT,
    IN INPUT_DIAGNOSIS TEXT,
    IN INPUT_LAB_RESULT VARCHAR(255),
    IN INPUT_TREATMENT VARCHAR(255),
    IN INPUT_RECORD_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE MEDICAL_RECORD
    SET 
        PRESCRIPTION = IFNULL(INPUT_PRESCRIPTION, PRESCRIPTION),
        DIAGNOSIS = IFNULL(INPUT_DIAGNOSIS, DIAGNOSIS),
        LAB_RESULT = IFNULL(INPUT_LAB_RESULT, LAB_RESULT),
        TREATMENT = IFNULL(INPUT_TREATMENT, TREATMENT)
    WHERE  RECORD_ID = INPUT_RECORD_ID;
END;
$$;

    -- View medical record by patient
CREATE OR REPLACE PROCEDURE GetMedicalRecordByPatient(IN INPUT_PATIENT_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT * FROM MEDICAL_RECORD WHERE PATIENT_ID = INPUT_PATIENT_ID;
END;
$$;

	-- View medical record of a doctor patient
CREATE OR REPLACE PROCEDURE GetMedicalRecordByDoctor(IN INPUT_DOCTOR_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT * FROM MEDICAL_RECORD
    JOIN PATIENT p USING (PATIENT_ID)
    JOIN DOCTOR d USING (DOCTOR_ID)
    WHERE d.DOCTOR_ID = INPUT_DOCTOR_ID;
END;
$$;

	-- Filter view medical record
CREATE OR REPLACE PROCEDURE FilterViewMedicalRecord(IN INPUT_RECORD_ID INT, IN INPUT_PATIENT_ID INT, IN INPUT_APPOINTMENT_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT * FROM MEDICAL_RECORD 
    WHERE 
        (INPUT_RECORD_ID IS NULL OR RECORD_ID = INPUT_RECORD_ID)
        AND (INPUT_PATIENT_ID IS NULL OR PATIENT_ID = INPUT_PATIENT_ID)
        AND (INPUT_APPOINTMENT_ID IS NULL OR APPOINTMENT_ID = INPUT_APPOINTMENT_ID);
END;
$$;

-- Patient
	-- Inset new patient
CREATE OR REPLACE PROCEDURE InsertNewPatient(
	IN INPUT_LAST_NAME VARCHAR(50),
    IN INPUT_FIRST_NAME VARCHAR(50),
	IN INPUT_HEIGHT DECIMAL(10, 2),
	IN INPUT_WEIGHT DECIMAL(10, 2),
	IN INPUT_DATE_OF_BIRTH DATE,
	IN INPUT_ADDRESS VARCHAR(255),
	IN INPUT_CONTACT VARCHAR(50),
	IN INPUT_EMAIL VARCHAR(50),
	IN INPUT_DOCTOR_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
	INSERT INTO PATIENT(LAST_NAME, FIRST_NAME, HEIGHT, WEIGHT, DATE_OF_BIRTH, ADDRESS, CONTACT, EMAIL, DOCTOR_ID)
	VALUES (INPUT_LAST_NAME, INPUT_FIRST_NAME, INPUT_HEIGHT, INPUT_WEIGHT, INPUT_DATE_OF_BIRTH, INPUT_ADDRESS, INPUT_CONTACT, INPUT_EMAIL, INPUT_DOCTOR_ID);
END;
$$;

	-- View patient of a specific doctor
CREATE OR REPLACE PROCEDURE GetPatientsByDoctor(IN INPUT_DOCTOR_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT * FROM PATIENT
    WHERE DOCTOR_ID = INPUT_DOCTOR_ID;
END;
$$;

	-- Update patient vitals, height and weight
CREATE OR REPLACE PROCEDURE UpdatePatientVitals(
    IN INPUT_HEIGHT DECIMAL(10,2),
    IN INPUT_WEIGHT DECIMAL(10,2),
    IN INPUT_PATIENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN 
    UPDATE PATIENT
    SET 
        HEIGHT = IFNULL(INPUT_HEIGHT, HEIGHT),
        WEIGHT = IFNULL(INPUT_WEIGHT, WEIGHT)
    WHERE PATIENT_ID = INPUT_PATIENT_ID;
END;
$$;

    -- Update patient info, address email contact
CREATE OR REPLACE PROCEDURE UpdatePatientInfo(
    IN INPUT_ADDRESS VARCHAR(255),
    IN INPUT_EMAIL VARCHAR(50),
    IN INPUT_CONTACT VARCHAR(50),
    IN INPUT_PATIENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN 
    UPDATE PATIENT
    SET
        ADDRESS = IFNULL(INPUT_ADDRESS, ADDRESS),
        EMAIL = IFNULL(INPUT_EMAIL, EMAIL),
        CONTACT = IFNULL(INPUT_CONTACT, CONTACT)
    WHERE PATIENT_ID = INPUT_PATIENT_ID;
END;
$$;

    -- View patient by ID
CREATE OR REPLACE PROCEDURE ViewPatientByID(IN INPUT_PATIENT_ID INT)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT * FROM PATIENT
    WHERE PATIENT_ID = INPUT_PATIENT_ID;
END;
$$;

    -- filter view patient
CREATE OR REPLACE PROCEDURE FilterViewPatient(
    IN INPUT_PATIENT_ID INT,
    IN INPUT_LAST_NAME VARCHAR(50),
    IN INPUT_FIRST_NAME VARCHAR(50),
    IN INPUT_DOCTOR_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT * FROM PATIENT
    WHERE
        (INPUT_PATIENT_ID IS NULL OR PATIENT_ID = INPUT_PATIENT_ID)
        AND (INPUT_LAST_NAME IS NULL OR LAST_NAME = INPUT_LAST_NAME)
        AND (INPUT_FIRST_NAME IS NULL OR FIRST_NAME = INPUT_FIRST_NAME)
        AND (INPUT_DOCTOR_ID IS NULL OR DOCTOR_ID = INPUT_DOCTOR_ID);
END;
$$;

-- Billing Table
	-- Insert new billing record
CREATE OR REPLACE PROCEDURE InsertBillingRecord(
    IN INPUT_TREATMENT_FEE DECIMAL(10,2),
    IN INPUT_MEDICATION_FEE DECIMAL(10,2),
    IN INPUT_LAB_TEST_FEE DECIMAL(10,2),
    IN INPUT_CONSULTATION_FEE DECIMAL(10,2),
    IN INPUT_RECEPTIONIST_ID INT,
    IN INPUT_PATIENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN 
    INSERT INTO BILLING(
        TREATMENT_FEE,
        MEDICATION_FEE,
        LAB_TEST_FEE,
        CONSULTATION_FEE,
        RECEPTIONIST_ID,
        PATIENT_ID,
        PAYMENT_STATUS
    ) VALUES (
        INPUT_TREATMENT_FEE,
        INPUT_MEDICATION_FEE,
        INPUT_LAB_TEST_FEE,
        INPUT_CONSULTATION_FEE,
        INPUT_RECEPTIONIST_ID,
        INPUT_PATIENT_ID,
        "Unpaid"
    );
END;
$$;

	-- Update billing status
CREATE OR REPLACE PROCEDURE UpdateBillingStatus(
    IN INPUT_STATUS VARCHAR(10),
    IN INPUT_BILLING_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    UPDATE BILLING
    SET
        PAYMENT_STATUS = IFNULL(INPUT_STATUS, PAYMENT_STATUS)
    WHERE BILLING_ID = INPUT_BILLING_ID;
END;
$$;

	-- Get billing by status
CREATE OR REPLACE PROCEDURE GetBillingByStatus(
    IN INPUT_STATUS VARCHAR(20)
)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT 
        * 
    FROM BILLING
    WHERE PAYMENT_STATUS = INPUT_STATUS;
END;
$$;

	-- Get billing by patient
CREATE OR REPLACE PROCEDURE GetBillingByPatient(
    IN INPUT_PATIENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT
        * 
    FROM BILLING B
    WHERE PATIENT_ID = INPUT_PATIENT_ID;
END;
$$;

    -- Filter view billing
CREATE OR REPLACE PROCEDURE FilterViewBilling(
    IN INPUT_BILLING_ID INT,
    IN INPUT_PAYMENT_STATUS VARCHAR(10),
    IN INPUT_RECEPTIONIST_ID INT,
    IN INPUT_PATIENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
    SELECT * FROM BILLING
    WHERE
        (INPUT_BILLING_ID IS NULL OR BILLING_ID = INPUT_BILLING_ID)
        AND (INPUT_PAYMENT_STATUS IS NULL OR PAYMENT_STATUS = INPUT_PAYMENT_STATUS)
        AND (INPUT_RECEPTIONIST_ID IS NULL OR RECEPTIONIST_ID = INPUT_RECEPTIONIST_ID)
        AND (INPUT_PATIENT_ID IS NULL OR PATIENT_ID = INPUT_PATIENT_ID);
END;
$$;

-- Department
    -- Add department
CREATE OR REPLACE PROCEDURE AddDepartment(
    IN INPUT_DEPARTMENT_NAME VARCHAR(100),
    IN INPUT_LOCATION VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN
    INSERT INTO DEPARTMENT(DEPARTMENT_NAME, LOCATION)
    VALUES (INPUT_DEPARTMENT_NAME, INPUT_LOCATION);
END;
$$;

    -- update department name
CREATE OR REPLACE PROCEDURE UpdateDepartmentName(
    IN INPUT_DEPARTMENT_ID INT,
    IN INPUT_DEPARTMENT_NAME VARCHAR(100)
)
LANGUAGE plpgsql
AS $$
BEGIN 
    UPDATE DEPARTMENT
    SET DEPARTMENT_NAME = IFNULL(INPUT_DEPARTMENT_NAME, DEPARTMENT_NAME)
    WHERE DEPARTMENT_ID = INPUT_DEPARTMENT_ID;
END;
$$;
	
    -- Filter view department
CREATE OR REPLACE PROCEDURE FilterViewDepartment(
	IN INPUT_DEPARTMENT_ID INT,
    IN INPUT_DEPARTMENT_NAME VARCHAR(100),
    IN INPUT_LOCATION VARCHAR(255)
)
LANGUAGE plpgsql
AS $$
BEGIN 
	SELECT * FROM DEPARTMENT
    WHERE
		(INPUT_DEPARTMENT_ID IS NULL OR DEPARTMENT_ID = INPUT_DEPARTMENT_ID)
        AND (INPUT_DEPARTMENT_NAME IS NULL OR DEPARTMENT_NAME = INPUT_DEPARTMENT_NAME)
        AND (INPUT_LOCATION IS NULL OR LOCATION = INPUT_LOCATION);
END;
$$;

-- Staff
	-- Add new staff
CREATE OR REPLACE PROCEDURE AddNewStaff(
    IN INPUT_LAST_NAME VARCHAR(50),
    IN INPUT_FIRST_NAME VARCHAR(50),
    IN INPUT_ROLE VARCHAR(100),
    IN INPUT_CONTACT VARCHAR(50),
    IN INPUT_DEPARTMENT_ID INT,
    IN INPUT_DOCTOR_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN 
	INSERT INTO STAFF (LAST_NAME, FIRST_NAME, ROLE, CONTACT, DEPARTMENT_ID, DOCTOR_ID)
	VALUES (INPUT_LAST_NAME, INPUT_FIRST_NAME, INPUT_ROLE, INPUT_CONTACT, INPUT_DEPARTMENT_ID, INPUT_DOCTOR_ID);
END;
$$;

	-- Update staff info
CREATE PROCEDURE UpdateStaffInfo(
	IN INPUT_STAFF_ID INT,
    IN INPUT_LAST_NAME VARCHAR(50),
    IN INPUT_FIRST_NAME VARCHAR(50),
    IN INPUT_ROLE VARCHAR(100),
    IN INPUT_CONTACT VARCHAR(50),
    IN INPUT_DEPARTMENT_ID INT,
    IN INPUT_DOCTOR_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
	UPDATE STAFF
	SET
		LAST_NAME = IFNULL(INPUT_LAST_NAME, LAST_NAME),
        FIRST_NAME = IFNULL(INPUT_FIRST_NAME, FIRST_NAME),
		ROLE = IFNULL(INPUT_ROLE, ROLE),
        CONTACT = IFNULL(INPUT_CONTACT, CONTACT),
        DEPARTMENT_ID = IFNULL(INPUT_DEPARTMENT_ID, DEPARTMENT_ID),
        DOCTOR_ID = IFNULL(INPUT_DOCTOR_ID, DOCTOR_ID)
	WHERE STAFF_ID = INPUT_STAFF_ID;
END;
$$;

	-- Filter view staff
CREATE PROCEDURE FilterViewStaff(
	IN INPUT_STAFF_ID INT,
    IN INPUT_LAST_NAME VARCHAR(50),
    IN INPUT_FIRST_NAME VARCHAR(50),
    IN INPUT_ROLE VARCHAR(100),
    IN INPUT_CONTACT VARCHAR(50),
    IN INPUT_DEPARTMENT_ID INT,
    IN INPUT_DOCTOR_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN 
	SELECT * FROM STAFF
    WHERE
		(INPUT_STAFF_ID IS NULL OR STAFF_ID = INPUT_STAFF_ID)
        AND (INPUT_LAST_NAME IS NULL OR LAST_NAME = INPUT_LAST_NAME)
        AND (INPUT_FIRST_NAME IS NULL OR FIRST_NAME = INPUT_FIRST_NAME)
        AND (INPUT_ROLE IS NULL OR ROLE = INPUT_ROLE)
        AND (INPUT_CONTACT IS NULL OR CONTACT = INPUT_CONTACT)
        AND (INPUT_DEPARTMENT_ID IS NULL OR DEPARTMENT_ID = INPUT_DEPARTMENT_ID)
        AND (INPUT_DOCTOR_ID IS NULL OR DOCTOR_ID = INPUT_DOCTOR_ID);
END;
$$;

-- Doctor
    -- Add doctor
CREATE OR REPLACE PROCEDURE InsertNewDoctor(
    IN INPUT_LAST_NAME VARCHAR(50),
    IN INPUT_FIRST_NAME VARCHAR(50),
    IN INPUT_CONTACT VARCHAR(50),
    IN INPUT_SPECIALIZATION VARCHAR(50),
    IN INPUT_EMAIL VARCHAR(50),
    IN INPUT_DEPARTMENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
	INSERT INTO DOCTOR (LAST_NAME, FIRST_NAME, CONTACT, SPECIALIZATION, EMAIL, DEPARTMENT_ID)
    VALUES (INPUT_LAST_NAME, INPUT_FIRST_NAME, INPUT_CONTACT, INPUT_SPECIALIZATION, INPUT_EMAIL, INPUT_DEPARTMENT_ID);
END;
$$;

    -- Filter view doctor
CREATE OR REPLACE PROCEDURE FilterViewDoctor(
	IN INPUT_DOCTOR_ID INT,
    IN INPUT_LAST_NAME VARCHAR(50),
    IN INPUT_FIRST_NAME VARCHAR(50),
    IN INPUT_CONTACT VARCHAR(50),
    IN INPUT_SPECIALIZATION VARCHAR(50),
    IN INPUT_EMAIL VARCHAR(50),
    IN INPUT_DEPARTMENT_ID INT
)
LANGUAGE plpgsql
AS $$
BEGIN
	SELECT * FROM DOCTOR
    WHERE 
		(INPUT_DOCTOR_ID IS NULL OR DOCTOR_ID = INPUT_DOCTOR_ID) 
        AND (INPUT_LAST_NAME IS NULL OR LAST_NAME = INPUT_LAST_NAME) 
        AND (INPUT_FIRST_NAME IS NULL OR FIRST_NAME = INPUT_FIRST_NAME) 
        AND (INPUT_CONTACT IS NULL OR CONTACT = INPUT_CONTACT) 
        AND (INPUT_SPECIALIZATION IS NULL OR SPECIALIZATION = INPUT_SPECIALIZATION) 
        AND (INPUT_EMAIL IS NULL OR EMAIL = INPUT_EMAIL) 
        AND (INPUT_DEPARTMENT_ID IS NULL OR DEPARTMENT_ID = INPUT_DEPARTMENT_ID);
END;
$$;